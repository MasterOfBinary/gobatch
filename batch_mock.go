package gobatch

import context "context"
import mock "github.com/stretchr/testify/mock"
import processor "github.com/MasterOfBinary/gobatch/processor"
import source "github.com/MasterOfBinary/gobatch/source"

// MockBatch is an autogenerated mock type for the Batch type
type MockBatch struct {
	mock.Mock
}

// Done provides a mock function with given fields:
func (_m *MockBatch) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Go provides a mock function with given fields: ctx, s, p
func (_m *MockBatch) Go(ctx context.Context, s source.Source, p processor.Processor) <-chan error {
	ret := _m.Called(ctx, s, p)

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, source.Source, processor.Processor) <-chan error); ok {
		r0 = rf(ctx, s, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

var _ Batch = (*MockBatch)(nil)
